/*
 * Sample Ecommerce App
 * 'This is a ***sample ecommerce app API***.  You can find out more about Swagger at [swagger.io](http://swagger.io). Description supports markdown markup. For example, you can use the `inline code` using back ticks.' 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mikhailpala@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Cart;
import org.openapitools.client.model.Item;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CartApi {
    private ApiClient localVarApiClient;

    public CartApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CartApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addCartItemsByCustomerId
     * @param customerId Customer Identifier (required)
     * @param item Item object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item added successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCartItemsByCustomerIdCall(String customerId, Item item, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = item;

        // create path and map variables
        String localVarPath = "/api/v1/carts/{customerId}/items"
            .replaceAll("\\{" + "customerId" + "\\}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCartItemsByCustomerIdValidateBeforeCall(String customerId, Item item, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling addCartItemsByCustomerId(Async)");
        }
        

        okhttp3.Call localVarCall = addCartItemsByCustomerIdCall(customerId, item, _callback);
        return localVarCall;

    }

    /**
     * Adds an item in shopping cart
     * Adds an item to the shopping cart if it doesn&#39;t already exist, or increment quantity by the specified number of items if it does.
     * @param customerId Customer Identifier (required)
     * @param item Item object (optional)
     * @return List&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item added successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public List<Item> addCartItemsByCustomerId(String customerId, Item item) throws ApiException {
        ApiResponse<List<Item>> localVarResp = addCartItemsByCustomerIdWithHttpInfo(customerId, item);
        return localVarResp.getData();
    }

    /**
     * Adds an item in shopping cart
     * Adds an item to the shopping cart if it doesn&#39;t already exist, or increment quantity by the specified number of items if it does.
     * @param customerId Customer Identifier (required)
     * @param item Item object (optional)
     * @return ApiResponse&lt;List&lt;Item&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item added successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Item>> addCartItemsByCustomerIdWithHttpInfo(String customerId, Item item) throws ApiException {
        okhttp3.Call localVarCall = addCartItemsByCustomerIdValidateBeforeCall(customerId, item, null);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds an item in shopping cart (asynchronously)
     * Adds an item to the shopping cart if it doesn&#39;t already exist, or increment quantity by the specified number of items if it does.
     * @param customerId Customer Identifier (required)
     * @param item Item object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item added successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCartItemsByCustomerIdAsync(String customerId, Item item, final ApiCallback<List<Item>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCartItemsByCustomerIdValidateBeforeCall(customerId, item, _callback);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addOrReplaceItemsByCustomerId
     * @param customerId Customer Identifier (required)
     * @param item Item object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item added successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceItemsByCustomerIdCall(String customerId, Item item, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = item;

        // create path and map variables
        String localVarPath = "/api/v1/carts/{customerId}/items"
            .replaceAll("\\{" + "customerId" + "\\}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/xml", "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrReplaceItemsByCustomerIdValidateBeforeCall(String customerId, Item item, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling addOrReplaceItemsByCustomerId(Async)");
        }
        

        okhttp3.Call localVarCall = addOrReplaceItemsByCustomerIdCall(customerId, item, _callback);
        return localVarCall;

    }

    /**
     * Replace/add an item in shopping cart
     * Adds an item to the shopping cart if it doesn&#39;t already exist, or replace with given item if it does.
     * @param customerId Customer Identifier (required)
     * @param item Item object (optional)
     * @return List&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item added successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public List<Item> addOrReplaceItemsByCustomerId(String customerId, Item item) throws ApiException {
        ApiResponse<List<Item>> localVarResp = addOrReplaceItemsByCustomerIdWithHttpInfo(customerId, item);
        return localVarResp.getData();
    }

    /**
     * Replace/add an item in shopping cart
     * Adds an item to the shopping cart if it doesn&#39;t already exist, or replace with given item if it does.
     * @param customerId Customer Identifier (required)
     * @param item Item object (optional)
     * @return ApiResponse&lt;List&lt;Item&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item added successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Item>> addOrReplaceItemsByCustomerIdWithHttpInfo(String customerId, Item item) throws ApiException {
        okhttp3.Call localVarCall = addOrReplaceItemsByCustomerIdValidateBeforeCall(customerId, item, null);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace/add an item in shopping cart (asynchronously)
     * Adds an item to the shopping cart if it doesn&#39;t already exist, or replace with given item if it does.
     * @param customerId Customer Identifier (required)
     * @param item Item object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Item added successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrReplaceItemsByCustomerIdAsync(String customerId, Item item, final ApiCallback<List<Item>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrReplaceItemsByCustomerIdValidateBeforeCall(customerId, item, _callback);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCart
     * @param customerId Customer Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCartCall(String customerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/carts/{customerId}"
            .replaceAll("\\{" + "customerId" + "\\}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCartValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling deleteCart(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCartCall(customerId, _callback);
        return localVarCall;

    }

    /**
     * Delete the shopping cart
     * Deletes the shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCart(String customerId) throws ApiException {
        deleteCartWithHttpInfo(customerId);
    }

    /**
     * Delete the shopping cart
     * Deletes the shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCartWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = deleteCartValidateBeforeCall(customerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the shopping cart (asynchronously)
     * Deletes the shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCartAsync(String customerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCartValidateBeforeCall(customerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItemFromCart
     * @param customerId Customer Identifier (required)
     * @param itemId Item (product) Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts the request, regardless of whether the specified item exists in the cart or not. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemFromCartCall(String customerId, String itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/carts/{customerId}/items/{itemId}"
            .replaceAll("\\{" + "customerId" + "\\}", localVarApiClient.escapeString(customerId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemFromCartValidateBeforeCall(String customerId, String itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling deleteItemFromCart(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteItemFromCart(Async)");
        }
        

        okhttp3.Call localVarCall = deleteItemFromCartCall(customerId, itemId, _callback);
        return localVarCall;

    }

    /**
     * Delete the item from shopping cart
     * Deletes the item from shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @param itemId Item (product) Identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts the request, regardless of whether the specified item exists in the cart or not. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteItemFromCart(String customerId, String itemId) throws ApiException {
        deleteItemFromCartWithHttpInfo(customerId, itemId);
    }

    /**
     * Delete the item from shopping cart
     * Deletes the item from shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @param itemId Item (product) Identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts the request, regardless of whether the specified item exists in the cart or not. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteItemFromCartWithHttpInfo(String customerId, String itemId) throws ApiException {
        okhttp3.Call localVarCall = deleteItemFromCartValidateBeforeCall(customerId, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the item from shopping cart (asynchronously)
     * Deletes the item from shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @param itemId Item (product) Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepts the request, regardless of whether the specified item exists in the cart or not. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemFromCartAsync(String customerId, String itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemFromCartValidateBeforeCall(customerId, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCartByCustomerId
     * @param customerId Customer Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCartByCustomerIdCall(String customerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/carts/{customerId}"
            .replaceAll("\\{" + "customerId" + "\\}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCartByCustomerIdValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCartByCustomerId(Async)");
        }
        

        okhttp3.Call localVarCall = getCartByCustomerIdCall(customerId, _callback);
        return localVarCall;

    }

    /**
     * Returns the shopping cart
     * Returns the shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @return Cart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public Cart getCartByCustomerId(String customerId) throws ApiException {
        ApiResponse<Cart> localVarResp = getCartByCustomerIdWithHttpInfo(customerId);
        return localVarResp.getData();
    }

    /**
     * Returns the shopping cart
     * Returns the shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @return ApiResponse&lt;Cart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cart> getCartByCustomerIdWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getCartByCustomerIdValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<Cart>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the shopping cart (asynchronously)
     * Returns the shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCartByCustomerIdAsync(String customerId, final ApiCallback<Cart> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCartByCustomerIdValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<Cart>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCartItemsByCustomerId
     * @param customerId Customer Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCartItemsByCustomerIdCall(String customerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/carts/{customerId}/items"
            .replaceAll("\\{" + "customerId" + "\\}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCartItemsByCustomerIdValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCartItemsByCustomerId(Async)");
        }
        

        okhttp3.Call localVarCall = getCartItemsByCustomerIdCall(customerId, _callback);
        return localVarCall;

    }

    /**
     * Returns the list of products in user&#39;s shopping cart
     * Returns the items in shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @return List&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public List<Item> getCartItemsByCustomerId(String customerId) throws ApiException {
        ApiResponse<List<Item>> localVarResp = getCartItemsByCustomerIdWithHttpInfo(customerId);
        return localVarResp.getData();
    }

    /**
     * Returns the list of products in user&#39;s shopping cart
     * Returns the items in shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @return ApiResponse&lt;List&lt;Item&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Item>> getCartItemsByCustomerIdWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getCartItemsByCustomerIdValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of products in user&#39;s shopping cart (asynchronously)
     * Returns the items in shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given customer ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCartItemsByCustomerIdAsync(String customerId, final ApiCallback<List<Item>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCartItemsByCustomerIdValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCartItemsByItemId
     * @param customerId Customer Identifier (required)
     * @param itemId Item (product) Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If item exists in cart </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given item (product) ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCartItemsByItemIdCall(String customerId, String itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/carts/{customerId}/items/{itemId}"
            .replaceAll("\\{" + "customerId" + "\\}", localVarApiClient.escapeString(customerId.toString()))
            .replaceAll("\\{" + "itemId" + "\\}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCartItemsByItemIdValidateBeforeCall(String customerId, String itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCartItemsByItemId(Async)");
        }
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getCartItemsByItemId(Async)");
        }
        

        okhttp3.Call localVarCall = getCartItemsByItemIdCall(customerId, itemId, _callback);
        return localVarCall;

    }

    /**
     * Returns given item from user&#39;s shopping cart
     * Returns given item from shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @param itemId Item (product) Identifier (required)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If item exists in cart </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given item (product) ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public Item getCartItemsByItemId(String customerId, String itemId) throws ApiException {
        ApiResponse<Item> localVarResp = getCartItemsByItemIdWithHttpInfo(customerId, itemId);
        return localVarResp.getData();
    }

    /**
     * Returns given item from user&#39;s shopping cart
     * Returns given item from shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @param itemId Item (product) Identifier (required)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If item exists in cart </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given item (product) ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Item> getCartItemsByItemIdWithHttpInfo(String customerId, String itemId) throws ApiException {
        okhttp3.Call localVarCall = getCartItemsByItemIdValidateBeforeCall(customerId, itemId, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns given item from user&#39;s shopping cart (asynchronously)
     * Returns given item from shopping cart of given customer
     * @param customerId Customer Identifier (required)
     * @param itemId Item (product) Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If item exists in cart </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Given item (product) ID doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCartItemsByItemIdAsync(String customerId, String itemId, final ApiCallback<Item> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCartItemsByItemIdValidateBeforeCall(customerId, itemId, _callback);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
