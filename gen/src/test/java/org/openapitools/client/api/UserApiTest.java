/*
 * Sample Ecommerce App
 * 'This is a ***sample ecommerce app API***.  You can find out more about Swagger at [swagger.io](http://swagger.io). Description supports markdown markup. For example, you can use the `inline code` using back ticks.' 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@packtpub.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RefreshToken;
import org.openapitools.client.model.SignInReq;
import org.openapitools.client.model.SignedInUser;
import org.openapitools.client.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Provides new JWT based on valid refresh token.
     *
     * Provides new JWT based on valid refresh token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccessTokenTest() throws ApiException {
        RefreshToken refreshToken = null;
        SignedInUser response = api.getAccessToken(refreshToken);

        // TODO: test validations
    }
    
    /**
     * Signin the customer (user)
     *
     * Signin the customer (user) that generates the JWT (access token) and refresh token, which can be used for accessing APIs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signInTest() throws ApiException {
        SignInReq signInReq = null;
        SignedInUser response = api.signIn(signInReq);

        // TODO: test validations
    }
    
    /**
     * Signouts the customer (user)
     *
     * Signouts the customer (user). It removes the refresh token from DB. Last issued JWT should be removed from client end that if not removed last for given expiration time.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signOutTest() throws ApiException {
        RefreshToken refreshToken = null;
        api.signOut(refreshToken);

        // TODO: test validations
    }
    
    /**
     * Signup the a new customer (user)
     *
     * Creates a new customer (user), who can login and do the shopping.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signUpTest() throws ApiException {
        User user = null;
        SignedInUser response = api.signUp(user);

        // TODO: test validations
    }
    
}
